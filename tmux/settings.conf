# vim:set ft=tmux:

conf_dir="$HOME/run_control/tmux"

set-environment -g TMUX_BUFFER_FILTER $conf_dir/buffer-filter

# If we attach to tmux under tmate let new shells communicate with it.
set -ga update-environment TMATE

#if-shell 'sleep 9; test -e /usr/share/terminfo/s/screen-256color' 'set -g default-terminal screen-256color'
#if-shell 'sleep 9; test -e /usr/share/terminfo/s/screen-256color' 'set    default-terminal screen-256color'
#run-shell 'sleep 9; test -e /usr/share/terminfo/s/screen-256color && tmux set -g default-terminal screen-256color'

# keys #

# prefix
# the opposite of Esc ^[ and can be done with one hand
set -g prefix ^]

# unbind old literal
unbind-key C-b

# unbind default keys that I don't like
unbind-key '"'
unbind-key '%'
unbind-key '='

# n+modifier for previous (similar to vim, but ctrl is more natural in this case)
#bind-key ^N previous-window

# literal
  # i like "]" as paste; "^]" is rare; cannot get any other modifiers to work with ] so use \ which is close by
bind-key ^\\ send-prefix

# double the prefix to bounce back and forth
bind-key ^] last-window

bind-key ^R refresh-client

# i don't need clock-mode to be bound to a single key stroke (t).
# choose-tree is a cool view, but usually when i switch sessions
# i just want to move up or down one and go to the window i was on
bind-key t choose-tree
bind-key s choose-session

bind-key H run-shell "man tmux" # help
bind-key Y run-shell "perl -e '\$_=qx/cal -y/; s/^/  /mg; s/ _\\010(.)_\\010(.) ?/<$1$2>/g; print' 2>&1" # calendar

# redisplay messages in case you forgot or couldn't read it
bind-key m show-messages

# condsider binding ^n ^p ^[ ^] j k

# Ctrl-C copy, Ctrl-V paste (X11 clipboard)
clipboard='env DISPLAY="${DISPLAY:-:0.0}" ~/usr/bin/clip'
chomp="perl -0777 -pe s/\\\\n+\\\\z//m | \${TMUX_BUFFER_FILTER:-cat}"
bind-key ^C new-window -d "tmux save-buffer - | $chomp | $clipboard; tmux display-message 'buffer copied to clipboard'"
bind-key ^V new-window -d "$clipboard | $chomp | tmux load-buffer - \\; paste-buffer -p \\; display-message 'buffer loaded from clipboard'"

# Use bracketed-paste mode.
bind-key '#' choose-buffer "paste-buffer -p -b '%%'"
# TODO: buffer-filter?
bind-key ] paste-buffer -p

# pane management keys #

#active_pane_pwd='' # 1.8
active_pane_pwd='#{pane_current_path}' # 1.9+

# Default "new-window" to start in the same pwd as the active pane.
bind-key c new-window -c "$active_pane_pwd"

#bind-key '"' choose-window
#bind-key '+' command-prompt -p index 'select-window "1%%"'
bind-key | split-window -h -c "$active_pane_pwd"
bind-key > split-window -h -c "$active_pane_pwd" -f
bind-key < split-window -h -c "$active_pane_pwd" -f -b
bind-key - split-window -v -c "$active_pane_pwd"

# bind-key W display-menu -T "#[align=centre]#{window_index}:#{window_name}" -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window

bind-key ! confirm-before kill-pane
bind-key Q break-pane
bind-key X break-pane -d

# bring in the most recent window
bind-key j join-pane -s ':!'
# prompt for window number
#bind-key J command-prompt -p index "join-pane -s ':%%'"
# select window from list
bind-key J choose-window "join-pane -s '%%'"

# command run-shell "move-window or swap-window"

# copy mode keys #
bind-key -T copy-mode-vi Enter  send -X copy-selection
bind-key -T copy-mode-vi Y      send -X copy-line-and-cancel
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi BSpace send -X clear-selection

bind-key -T copy-mode-vi [      send -X previous-prompt
bind-key -T copy-mode-vi ]      send -X next-prompt

# server options #

# turn off Escape key delay
set-option -s escape-time 0

# session options #

set-option -g bell-action any
set-option -g detach-on-destroy on
set-option -g display-panes-time 3000
set-option -g display-time 2000
set-option -g history-limit 100000

#set-option -g lock-after-time 3600
#set-option -g lock-command "" # lck and lock not in ubuntu... vlock?

set-option -g repeat-time 1000
##set-option -g set-titles on
##set-option -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)
set-option -g status-keys emacs

set-option -g visual-activity on
set-option -g visual-bell on
set-option -g visual-silence on

# window options #

set-option -g -w aggressive-resize on

# status line #

set -g status-interval 1
set -g status-bg colour233 # dark grey
set -g status-fg green
set -g status-left-length 25
set -g status-left '#[fg=yellow]#h #[fg=cyan][#[fg=green,bold]#S#[fg=yellow,nobold]:#I.#P#[fg=cyan]] '
set -g status-right-length 35
set -g status-right '#[fg=yellow]#(uptime | sed -E "s/.+ load averages?: //; s/,//g")#[fg=cyan]|#[fg=magenta]%m-%d #[fg=green]%H:%M:%S#[fg=cyan]|#[fg=red]#(date -u +%%H)#[fg=green]Z'

setw -g window-status-current-style "fg=white bold"
setw -g window-status-last-style    "fg=green bold"

# window options #

setw -g alternate-screen on
setw -g mode-keys vi
setw -g wrap-search off
setw -g xterm-keys on

# add something to terminal-overrides for arrow keys?
# set -g terminal-overrides ""*88col*:colors=88,*256col*:colors=256"
#set -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E[%p1%d q:Csr=\E[2 q,screen*:XT'
#set -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'
#set -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cs=\E]12;%p1%s\007:Cr=\E]112\007:Ss=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'
# Fix truecolor
set -ga terminal-overrides ",*-256color:Tc"


# Split Navigation #

# Move specific directions instead of cycling.
#bind-key Tab    select-pane -t :.+1
#bind-key BSpace select-pane -t :.-1
unbind-key Tab
unbind-key BSpace
source-file "$conf_dir/vim-tmux-navigator.conf"

# Tmux 2.0 changed the way copy-line works.
# I really don't want the trailing newline.
# https://github.com/tmux/tmux/issues/61

source-file $conf_dir/chomp-buffer.conf

# Remove config interpolation vars from global environment.
run-shell "$conf_dir/unset-vars.sh"
